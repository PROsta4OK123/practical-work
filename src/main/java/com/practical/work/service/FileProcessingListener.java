package com.practical.work.service;

import com.practical.work.entity.FileProcessingQueue;
import com.practical.work.event.FileQueuedEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class FileProcessingListener {

    @Autowired
    private FileQueueService fileQueueService;

    @Autowired
    private DocumentProcessingService documentProcessingService;

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
    private final ConcurrentHashMap<String, Integer> activeProcessings = new ConcurrentHashMap<>();

    @EventListener
    public void handleFileQueuedEvent(FileQueuedEvent event) {
        log.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: {}. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤.", event.getFileId());
        processNextInQueue();
    }

    private void processNextInQueue() {
        if (!hasAvailableResources()) {
            log.info("üö¶ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–Ω—è—Ç—ã. –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –∂–¥–∞—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è.");
            return;
        }

        Optional<FileProcessingQueue> nextFile = fileQueueService.getNextForProcessing();

        if (nextFile.isPresent()) {
            FileProcessingQueue file = nextFile.get();
            if (canProcessFile(file.getEstimatedThreads())) {
                processFileAsync(file);
            } else {
                log.debug("‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {} (–Ω—É–∂–Ω–æ {} –ø–æ—Ç–æ–∫–æ–≤)",
                        file.getOriginalFilename(), file.getEstimatedThreads());
            }
        } else {
            log.debug("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤");
        }
    }

    private boolean hasAvailableResources() {
        int totalUsedThreads = activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
        // TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        return totalUsedThreads < 6;
    }

    private boolean canProcessFile(int requiredThreads) {
        int totalUsedThreads = activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
        // TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        return (totalUsedThreads + requiredThreads) <= 6;
    }

    private void processFileAsync(FileProcessingQueue queueItem) {
        String fileId = queueItem.getFileId();
        int threadsUsed = queueItem.getEstimatedThreads();

        activeProcessings.put(fileId, threadsUsed);

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {} (ID: {}, –ø–æ—Ç–æ–∫–æ–≤: {}). –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {}",
                queueItem.getOriginalFilename(), fileId, threadsUsed, activeProcessings.size());

        CompletableFuture.runAsync(() -> {
            try {
                documentProcessingService.processDocument(
                        queueItem.getFilePath(),
                        fileId
                );
                fileQueueService.markAsCompleted(fileId);
                log.info("‚úÖ –§–∞–π–ª {} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", queueItem.getOriginalFilename());

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {} –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
                        queueItem.getOriginalFilename(), e);
                fileQueueService.markAsFailed(fileId, e.getMessage());

            } finally {
                activeProcessings.remove(fileId);
                log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å...",
                        queueItem.getOriginalFilename(), activeProcessings.size());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
                processNextInQueue();
            }
        });
    }

    public int getActiveProcessingCount() {
        return activeProcessings.size();
    }

    public int getTotalUsedThreads() {
        return activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
    }
} 