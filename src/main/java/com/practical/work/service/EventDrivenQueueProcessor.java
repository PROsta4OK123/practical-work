package com.practical.work.service;

import com.practical.work.entity.FileProcessingQueue;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class EventDrivenQueueProcessor {

    @Autowired
    private FileQueueService fileQueueService;

    @Autowired
    private DocumentProcessingService documentProcessingService;

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ (fileId -> –ø–æ—Ç–æ–∫–∏)
    private final ConcurrentHashMap<String, Integer> activeProcessings = new ConcurrentHashMap<>();
    private final AtomicBoolean isCheckingQueue = new AtomicBoolean(false);

    /**
     * –°–æ–±—ã—Ç–∏–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã
     */
    public void processNextInQueue() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        if (isCheckingQueue.compareAndSet(false, true)) {
            log.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...");
            
            try {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                while (hasAvailableResources()) {
                    Optional<FileProcessingQueue> nextFile = fileQueueService.getNextForProcessing();
                    
                    if (nextFile.isPresent()) {
                        FileProcessingQueue file = nextFile.get();
                        int requiredThreads = file.getEstimatedThreads();
                        
                        if (canProcessFile(requiredThreads)) {
                            processFileAsync(file);
                        } else {
                            log.debug("‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {} (–Ω—É–∂–Ω–æ {} –ø–æ—Ç–æ–∫–æ–≤)", 
                                file.getOriginalFilename(), requiredThreads);
                            break;
                        }
                    } else {
                        log.debug("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤");
                        break;
                    }
                }
                
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏", e);
            } finally {
                isCheckingQueue.set(false);
            }
        } else {
            log.debug("‚è≥ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è");
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    private boolean hasAvailableResources() {
        int totalUsedThreads = activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
        return totalUsedThreads < 6; // –ú–∞–∫—Å–∏–º—É–º 6 –ø–æ—Ç–æ–∫–æ–≤ –≤—Å–µ–≥–æ
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ç—Ä–µ–±—É–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤
     */
    private boolean canProcessFile(int requiredThreads) {
        int totalUsedThreads = activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
        return (totalUsedThreads + requiredThreads) <= 6;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
     */
    private void processFileAsync(FileProcessingQueue queueItem) {
        String fileId = queueItem.getFileId();
        int threadsUsed = queueItem.getEstimatedThreads();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        activeProcessings.put(fileId, threadsUsed);
        
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {} (ID: {}, –ø–æ—Ç–æ–∫–æ–≤: {}). –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {}", 
            queueItem.getOriginalFilename(), fileId, threadsUsed, activeProcessings.size());
        
        CompletableFuture.runAsync(() -> {
            try {
                // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                documentProcessingService.processDocument(
                    queueItem.getFilePath(), 
                    fileId
                );
                
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                fileQueueService.markAsCompleted(fileId);
                
                log.info("‚úÖ –§–∞–π–ª {} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", queueItem.getOriginalFilename());
                
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {} –∏–∑ –æ—á–µ—Ä–µ–¥–∏", 
                    queueItem.getOriginalFilename(), e);
                
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                fileQueueService.markAsFailed(fileId, e.getMessage());
                
            } finally {
                // –ì–õ–ê–í–ù–û–ï: –£–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
                activeProcessings.remove(fileId);
                
                log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å...", 
                    queueItem.getOriginalFilename(), activeProcessings.size());
                
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                processNextInQueue();
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
     */
    public boolean isCurrentlyProcessing() {
        return !activeProcessings.isEmpty();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
     */
    public int getActiveProcessingCount() {
        return activeProcessings.size();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    public int getTotalUsedThreads() {
        return activeProcessings.values().stream().mapToInt(Integer::intValue).sum();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
     */
    public void forceStop() {
        log.warn("‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏");
        activeProcessings.clear();
    }
} 